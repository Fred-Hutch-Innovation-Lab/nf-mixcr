profiles {
    test {
        outputDir = "tests/results/"
        // somehow setting cleanup to true causes some tests to fail? Like the intermediate files are lost 
        // and that breaks expected outputs (e.g. versions.yml). not sure why
        // possibly to due with how nf-test handles process/workflow outputs under the hood, after pipeline execution
        cleanup = false
        params {
            run_dir = "${projectDir}/tests/data/"
            samplesheet = "${projectDir}/tests/data/samplesheet.csv"
            concatenate_fastq = true
            downsample = true
            downsample_target = 10000
                mixcr_license = '/fh/fast/_IRC/FHIL/grp/analyses/BM_03/02_data/02_data-processing/MixCR/mixcr_license.txt'
            /*
            * MixCR required settings
            *  For additional/optional arguments, provide a process scope with ext.args (see confs/modules.config)
            */
            mixcr_preset = 'generic-amplicon-with-umi'
            mixcr_material = 'rna'
            mixcr_species = 'hsa'
            mixcr_assemble_clonotypes_by = 'CDR3'
            mixcr_left_alignment_boundary  = 'float' // [fload, rigid]
            mixcr_right_alignment_boundary = 'float' // [fload, rigid]
            mixcr_left_alignment_anchor  = ''        // gene_type or anchor point, e.g. 'C'. Can also be empty
            mixcr_right_alignment_anchor = 'C'       // gene_type or anchor point, e.g. 'C'. Can also be empty
            mixcr_tag_pattern = "^(R1:*)\\^(UMI:N{18})(R2:*)"
            /*
            * Additional arguments passed to MixCR analyze via -M <step.parameter=value>
            * refer to the preset yamls for syntax on specifying additional arguments
            * https://github.com/milaboratory/mixcr/tree/develop/src/main/resources/presets/blocks
            */
            mixcr_analyze_additional_arguments = ["assemble.cloneAssemblerParameters.separateByV=true", "assemble.cloneAssemblerParameters.separateByJ=true"]  // in <step.parameter=value> format. E.g. "assemble.separateByV=true"
        }
    }
    slurm {
        // Copying params from nf-core/fred_hutch profile
        process {
            executor = 'slurm'
            // clusterOptions = {}
            queue = { task.time <= 12.h ? 'short' : 'campus-new' }
            maxRetries = 2
            resourceLimits = [
                memory: 700.GB,
                cpus: 36,
                time: 720.h
            ]
            // Same as resourceLimits, but for older pipelines
            max_memory = 700.GB
            max_cpus = 36
            max_time = 720.h
            beforeScript = """
            module load Apptainer
            """
            // env.NXF_APPTAINER_CACHEDIR = "$HOME/.apptainer/cache"
        }
        executor {
            // How many jobs can be submitted at once
            queueSize = 16
            // Maximum jobs per second
            submitRateLimit = "10/1sec"
        }
        
    }
}